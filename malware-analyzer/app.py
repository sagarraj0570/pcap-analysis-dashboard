from flask import Flask, request, jsonify, render_template, redirect, url_for, session, send_file
import pyshark
import os
import asyncio
from datetime import datetime
from werkzeug.utils import secure_filename
from fpdf import FPDF

app = Flask(__name__)
app.secret_key = 'secret_key_here'
app.config['UPLOAD_FOLDER'] = './uploads'
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)


@app.route('/')
def index():
    return render_template('index.html')


@app.route('/summary')
def summary():
    if 'analysis' not in session:
        return redirect(url_for('index'))
    return render_template('summary.html', data=session['analysis'])


@app.route('/details')
def details():
    if 'analysis' not in session:
        return redirect(url_for('index'))
    return render_template('details.html', data=session['analysis'])


@app.route('/report')
def report():
    if 'analysis' not in session:
        return redirect(url_for('index'))
    return render_template('report.html', data=session['analysis'], now=datetime.now().strftime("%d %B %Y, %I:%M %p"))


@app.route('/download-pdf')
def download_pdf():
    if 'analysis' not in session:
        return redirect(url_for('index'))

    data = session['analysis']
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="Malware Traffic Analysis Report", ln=1, align='C')
    pdf.cell(200, 10, txt="Generated: {}".format(datetime.now().strftime("%d-%m-%Y %I:%M %p")), ln=2, align='C')
    pdf.ln(10)

    pdf.set_font("Arial", size=10)
    pdf.cell(200, 10, txt=f"Total Packets: {data.get('total_packets', 0)}", ln=True)
    pdf.cell(200, 10, txt=f"Suspicious IPs: {len(data.get('suspicious_ips', {}))}", ln=True)
    pdf.cell(200, 10, txt=f"Protocols Detected: {len(data.get('protocols', {}))}", ln=True)
    pdf.ln(5)

    pdf.set_font("Arial", 'B', size=10)
    pdf.cell(200, 10, txt="Suspicious IPs:", ln=True)
    pdf.set_font("Arial", size=10)
    for ip, status in data['suspicious_ips'].items():
        pdf.cell(200, 10, txt=f"{ip} - {status}", ln=True)

    pdf.ln(5)
    pdf.set_font("Arial", 'B', size=10)
    pdf.cell(200, 10, txt="Top Protocols:", ln=True)
    pdf.set_font("Arial", size=10)
    for proto, count in data['protocols'].items():
        pdf.cell(200, 10, txt=f"{proto}: {count} packets", ln=True)

    pdf.ln(5)
    pdf.set_font("Arial", 'B', size=10)
    pdf.cell(200, 10, txt="Sample TCP Stream:", ln=True)
    pdf.set_font("Courier", size=8)
    stream = data['tcp_stream'][:1000].replace('\n', ' ')
    pdf.multi_cell(0, 8, stream)

    pdf_path = os.path.join(app.config['UPLOAD_FOLDER'], 'report.pdf')
    pdf.output(pdf_path)
    return send_file(pdf_path, as_attachment=True)


def analyze_pcap(filepath):
    try:
        asyncio.set_event_loop(asyncio.new_event_loop())
    except:
        pass

    suspicious_ips = set()
    protocol_count = {}
    tcp_streams = []
    total_packets = 0

    try:
        cap = pyshark.FileCapture(filepath, only_summaries=False, use_json=True)
        for packet in cap:
            total_packets += 1
            try:
                ip_layer = packet.ip
                suspicious_ips.add(ip_layer.src)
                suspicious_ips.add(ip_layer.dst)
            except AttributeError:
                pass

            proto = packet.highest_layer
            protocol_count[proto] = protocol_count.get(proto, 0) + 1

            if 'TCP' in packet and hasattr(packet.tcp, 'payload'):
                payload = str(packet.tcp.payload)
                if payload:
                    tcp_streams.append(payload)
        cap.close()
    except Exception as e:
        return {'error': str(e)}

    return {
        'total_packets': total_packets,
        'suspicious_ips': {ip: "Unknown" for ip in list(suspicious_ips)[:10]},
        'protocols': dict(sorted(protocol_count.items(), key=lambda x: x[1], reverse=True)),
        'tcp_stream': tcp_streams[0] if tcp_streams else ""
    }


@app.route('/analyze', methods=['POST'])
def analyze():
    if 'pcap' not in request.files:
        return jsonify({'error': 'No file part'}), 400

    file = request.files['pcap']
    if file.filename == '':
        return jsonify({'error': 'No selected file'}), 400

    filename = secure_filename(file.filename)
    filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    file.save(filepath)

    result = analyze_pcap(filepath)
    session['analysis'] = result
    return jsonify({'success': True, 'redirect': url_for('summary')})


if __name__ == '__main__':
    app.run(debug=True)

